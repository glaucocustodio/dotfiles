# ex: using_port tcp:3000
#
using_port() { lsof -i $@ }

# ex: kill_all_in_port tcp:3000
#
# source: https://til.hashrocket.com/posts/e4c8c665a8-find-and-kill-all-processes-listening-on-a-port
#
kill_all_in_port() { lsof -ti $@ | xargs kill -9 }

# remove gf alias defined by git plugin
unalias gf

function gf() {
  if [ $# -eq 0 ]; then
    ff https://gurufocus.com
  else
    ff https://gurufocus.com/stock/$1/summary
  fi
}

function yf() {
  if [ $# -eq 0 ]; then
    ff https://finance.yahoo.com
  else
    ff https://finance.yahoo.com/quote/$1/analysis
  fi
}

function br() {
  if [ $# -eq 0 ]; then
    ff https://bullrun.com.br
  else
    ff https://bullrun.com.br/acoes/$1
  fi
}

function fetch_usd_brl_quote() {
  response=$(curl -s "https://query1.finance.yahoo.com/v8/finance/chart/USDBRL=X")
  regularMarketPrice=$(echo $response | jq '.chart.result[0].meta.regularMarketPrice')
  echo "\nUSD/BRL: $regularMarketPrice"
}

function init_conda() {
    __conda_setup="$('/Users/glauco/miniconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
    if [ $? -eq 0 ]; then
        eval "$__conda_setup"
    else
        if [ -f "/Users/glauco/miniconda3/etc/profile.d/conda.sh" ]; then
            . "/Users/glauco/miniconda3/etc/profile.d/conda.sh"
        else
            export PATH="/Users/glauco/miniconda3/bin:$PATH"
        fi
    fi
    unset __conda_setup
}

# allow removing many ips at once from ~/.ssh/known_hosts
# eg: remove_ips_from_known_hosts 116.203.223.67 116.203.23.196 88.99.187.106
function remove_ips_from_known_hosts() {
  for ip in "$@"; do
    ssh-keygen -R "$ip"
  done
}


function extract() {
  local OIFS="$IFS"
  local IFS=$'\n'

  for i in "$*"
  do
    [ ! -f "$i" ] || [ ! -r "$i" ] && echo "'$i' is not present or could not be read" && continue

    case $i in
      *.tar.bz2|*.tbz2) bzip2 -dc $i | tar xvf -    ;;
      *.tar.gz|*.tgz)   gzip -dc $i  | tar xvf -    ;;
      *.tar.xz) tar --xz xvf $i;;
      *.bz2)     bzip2 -dc $i     ;;
      *.rar)     rar x $i   ;;
      *.gz)      gzip -d $i   ;;
      *.tar)     tar xvf $i    ;;
      *.zip)     unzip $i   ;;
      *.Z)       uncompress $i  ;;
      *.7z)      7z x $i  ;;
      *.deb)     ar xv $i ;;
      *.ztb)     unzip $i ;;
      *.jar)     unzip $i ;;
      *)         echo "'$i' cannot be extracted via extract()" ;;

  esac
  done
}


function draw_flashcard() {
  # Path to the JSON file
  json_file="${HOME}/.flashcards.json"

  # Check if the JSON file exists
  if [[ -f "${json_file}" ]]; then
      # Fetch a random item from the array in the JSON file and print its 'front' attribute (limited to 100 characters)
      flashcard_text=$(jq -r '.[] | .front' "${json_file}" | shuf -n 1 | cut -c 1-130)

       # Determine the length of the message and add padding for the speech bubble
      text_length=${#flashcard_text}
      padding_length=5
      # padded_text="$(printf '%*s' "$((text_length + padding_length))" "$flashcard_text")"
      padded_text=$(printf '%*s' "$((padding_length))"; printf '%s' "$flashcard_text"; printf '%*s' "$((padding_length))")
      bubble_inner_width=$((text_length + (2 * padding_length)))

      # Create a string with the same number of dashes as the width of the bubble
      bubble_top_bottom=$(printf '-%.0s' $(seq 1 $bubble_inner_width))
      bubble_top=" /${bubble_top_bottom}\\"
      bubble_bottom=" \\${bubble_top_bottom}/"

      # Print the ASCII art speech bubble with the message
      printf "${bubble_top}"
      printf "\n |${padded_text}|\n"
      printf "${bubble_bottom}\n\n"
  else
      echo "The flashcard file does not exist."
  fi
}
